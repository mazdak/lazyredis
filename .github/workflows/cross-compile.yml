name: Cross-Compile Rust App for Linux

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Cache Rust dependencies to speed up builds
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Configure repositories and install dependencies
      - name: Configure repositories and install dependencies
        run: |
          # Get Ubuntu codename from /etc/os-release for robust source configuration
          CODENAME=$(. /etc/os-release && echo "$VERSION_CODENAME")
          echo "Runner Ubuntu Codename: ${CODENAME}"
          HOST_ARCH=$(dpkg --print-architecture)
          echo "Runner Host Architecture: ${HOST_ARCH}"

          # Replace Azure mirror with official Ubuntu repositories.
          # This helps ensure consistency if the base image uses Azure mirrors.
          echo "Replacing Azure mirrors with official Ubuntu mirrors..."
          sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' /etc/apt/sources.list
          # Also attempt to replace in any existing sources.list.d files.
          sudo find /etc/apt/sources.list.d/ -type f -name "*.list" -exec sudo sed -i 's/azure.archive.ubuntu.com/archive.ubuntu.com/g' {} \; || echo "Sed on sources.list.d files for Azure mirror replacement had issues or no files found, continuing."

          # Restrict existing Ubuntu sources to host architecture to prevent issues when adding foreign architectures.
          # This ensures that 'apt-get update' after 'dpkg --add-architecture arm64' doesn't try to find arm64 packages
          # from amd64-focused repositories which might lead to 404 errors.
          echo "Restricting existing Ubuntu sources in /etc/apt/sources.list to [arch=${HOST_ARCH}]..."
          sudo sed -i -E "/^deb(-src)?\s+http:\/\/[^[:space:]]*ubuntu\.com/ { /\[arch=/! s/^(deb(-src)?\s+)/\1[arch=${HOST_ARCH}] / }" /etc/apt/sources.list
          
          echo "Restricting existing Ubuntu sources in /etc/apt/sources.list.d/ to [arch=${HOST_ARCH}]..."
          sudo find /etc/apt/sources.list.d/ -type f -name "*.list" -print0 | \
            while IFS= read -r -d $'\0' file; do
              # Only attempt to modify files that actually contain ubuntu.com source lines and don't already have [arch=arm64] for ports.
              # This check avoids modifying our own arm64-ports-sources.list if it were created earlier by mistake or in a retry.
              if grep -q -E "^deb(-src)?\s+http:\/\/[^[:space:]]*ubuntu\.com" "$file" && ! grep -q -E "\[arch=arm64\].*ports\.ubuntu\.com" "$file"; then
                echo "Modifying $file to restrict to [arch=${HOST_ARCH}] for Ubuntu sources"
                sudo sed -i -E "/^deb(-src)?\s+http:\/\/[^[:space:]]*ubuntu\.com/ { /\[arch=/! s/^(deb(-src)?\s+)/\1[arch=${HOST_ARCH}] / }" "$file"
              else
                echo "Skipping $file for host architecture restriction (either not an Ubuntu source or already arch-specific)."
              fi
            done || echo "Processing sources.list.d for arch restriction had issues or no applicable files found, continuing."

          # Debug: Show sources.list content after modification
          echo "--- /etc/apt/sources.list after host arch restriction (first 20 lines) ---"
          sudo head -n 20 /etc/apt/sources.list
          echo "--- Relevant files in /etc/apt/sources.list.d/ after host arch restriction ---"
          for f_path in $(sudo find /etc/apt/sources.list.d/ -type f -name "*.list" 2>/dev/null || true); do
            if [ -f "$f_path" ]; then
              echo "--- Content of $f_path ---"
              sudo cat "$f_path"
              echo "----------------------"
            fi
          done
          echo "---------------------------------------------------------------------------"

          # Initial package list update FOR HOST ARCHITECTURE ONLY
          echo "Updating package lists for host architecture (${HOST_ARCH}) only..."
          sudo apt-get update -y

          # Install common dependencies required for both host and possibly for build scripts.
          # libxcb1-dev is for the host if building host tools or for native target.
          # pkg-config is a general build tool.
          sudo apt-get install -y libxcb1-dev pkg-config

          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            # Add arm64 architecture for cross-compilation
            sudo dpkg --add-architecture arm64

            # Configure apt sources for arm64 to use ports.ubuntu.com
            # This is critical as standard mirrors may not carry arm64 packages correctly.
            # Remove any pre-existing arm64 source list to avoid conflicts.
            ARM64_SOURCES_FILE="/etc/apt/sources.list.d/arm64-ports-sources.list"
            sudo rm -f "${ARM64_SOURCES_FILE}"
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME} main restricted universe multiverse" | sudo tee "${ARM64_SOURCES_FILE}"
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-updates main restricted universe multiverse" | sudo tee -a "${ARM64_SOURCES_FILE}"
            echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-security main restricted universe multiverse" | sudo tee -a "${ARM64_SOURCES_FILE}"
            # Optionally, include backports if needed:
            # echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-backports main restricted universe multiverse" | sudo tee -a "${ARM64_SOURCES_FILE}"

            # Update package lists again to include arm64 sources
            sudo apt-get update -y

            # Install cross-compiler toolchain and arm64 version of libraries
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libxcb1-dev:arm64
          fi

          # Debugging: Verify library installation and pkg-config context
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "--- Debugging for aarch64-unknown-linux-gnu ---"
            echo "Listing aarch64 libxcb libraries in /usr/lib/aarch64-linux-gnu/:"
            ls -l /usr/lib/aarch64-linux-gnu/libxcb* || echo "No aarch64 libxcb files found at expected path."
            echo "Relevant environment variables for Cargo's pkg-config:"
            echo "  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=${CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER:-<not set>}"
            echo "  PKG_CONFIG_PATH_aarch64_unknown_linux_gnu=${PKG_CONFIG_PATH_aarch64_unknown_linux_gnu:-<not set>}"
            echo "  PKG_CONFIG_SYSROOT_DIR_aarch64_unknown_linux_gnu=${PKG_CONFIG_SYSROOT_DIR_aarch64_unknown_linux_gnu:-<not set>}"
            echo "-------------------------------------------------"
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
            echo "--- Debugging for x86_64-unknown-linux-gnu ---"
            echo "Verifying host (x86_64) pkg-config for xcb:"
            pkg-config --libs --cflags xcb || echo "Host pkg-config check for xcb failed."
            echo "------------------------------------------------"
          fi

      # Build the Rust application
      - name: Build
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          PKG_CONFIG_aarch64_unknown_linux_gnu: pkg-config
          PKG_CONFIG_PATH_aarch64_unknown_linux_gnu: /usr/lib/aarch64-linux-gnu/pkgconfig
          PKG_CONFIG_SYSROOT_DIR_aarch64_unknown_linux_gnu: /usr/aarch64-linux-gnu
          PKG_CONFIG_ALLOW_CROSS: 1
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_RUSTFLAGS: "-C link-arg=-L/usr/lib/aarch64-linux-gnu"
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/lazyredis
